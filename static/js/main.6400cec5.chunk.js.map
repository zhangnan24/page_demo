{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","readStr","setReadStr","useState","React","createElement","style","padding","textAlign","marginBottom","color","href","target","rel","Upload","Dragger","beforeUpload","file","fileName","name","reader","FileReader","onload","e","_e$target","binaryStr","result","workbook","XLSX","type","raw","codepage","endsWith","undefined","res","SheetNames","forEach","s","worksheet","Sheets","jsonList","sheet_to_json","header","keys","k","formatedStr","map","item","filter","Boolean","join","replaceAll","replace","push","onerror","message","error","readAsArrayBuffer","showUploadList","margin","Input","TextArea","autoSize","value","onChange","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"oQA2FeA,MAtFHA,KACV,MAAOC,EAASC,GAAcC,qBAiD9B,OACEC,IAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,KACrBH,IAAAC,cAAA,MAAIC,MAAO,CAAEE,UAAW,SAAUC,aAAc,KAAM,8CAEpDL,IAAAC,cAAA,QAAMC,MAAO,CAAEI,MAAO,cAAe,qCAAyB,eAC9DN,IAAAC,cAAA,KACEM,KAAK,0BACLC,OAAO,SACPC,IAAI,uBACL,aAKHT,IAAAC,cAACS,IAAOC,QAAO,CACbC,aA7DkBC,IACtB,MAAMC,EAAWD,EAAKE,KAEhBC,EAAS,IAAIC,WAwCnB,OAtCAD,EAAOE,OAAUC,IAAO,IAADC,EACrB,MAAMC,EAAoB,QAAXD,EAAGD,EAAEX,cAAM,IAAAY,OAAA,EAARA,EAAUE,OAC5B,GAAID,EAAW,CACb,MAAME,EAAWC,IAAUH,EAAW,CACpCI,KAAM,SACNC,KAAK,EACLC,SAAUb,EAASc,SAAS,QAAU,WAAQC,IAI1CC,EAAM,GAEZP,EAASQ,WAAWC,QAASC,IAC3B,MAAMC,EAAYX,EAASY,OAAOF,GAC5BG,EAAWZ,IAAWa,cAAcH,GACpCI,EAASF,EAAS,GACxBG,eAAKD,GAAQN,QAASQ,IACpB,MAGMC,EAHcC,cAAIN,EAAWO,GAASA,EAAKH,IAAII,OACnDC,SAGCC,KAAK,UACLC,WAAW,SAAK,UAChBC,QAAQ,OAAQ,UAEnBlB,EAAImB,KAAK,GAAGhB,KAAKO,UAAKC,SAI1B3C,EAAWgC,EAAIgB,KAAK,WAIxB9B,EAAOkC,QAAU,KACfC,IAAQC,MAAM,+CAGhBpC,EAAOqC,kBAAkBxC,IAClB,GAmBHyC,gBAAgB,EAChBpD,MAAO,CAAEG,aAAc,KAEvBL,IAAAC,cAAA,OAAKC,MAAO,CAAEqD,OAAQ,YACpBvD,IAAAC,cAAA,UAAI,0DACJD,IAAAC,cAAA,MAAIC,MAAO,CAAEI,MAAO,MAAOiD,OAAQ,IAAK,4HACxCvD,IAAAC,cAAA,MAAIC,MAAO,CAAEI,MAAO,MAAOiD,OAAQ,IAAK,wEAI5CvD,IAAAC,cAAA,MAAIC,MAAO,CAAEE,UAAW,WAAY,uCACpCJ,IAAAC,cAACuD,IAAMC,SAAQ,CACbC,UAAQ,EACRC,MAAO9D,EACP+D,SAAWzC,GAAMrB,EAAWqB,EAAEX,OAAOmD,WCzEzBd,QACW,cAA7BgB,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPlE,IAAAC,cAACD,IAAMmE,WAAU,KACfnE,IAAAC,cAACL,EAAG,OAENwE,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAMxB,IACLyB,QAAQzB,MAAMA,EAAMD,a","file":"static/js/main.6400cec5.chunk.js","sourcesContent":["import { Input, message, Upload } from \"antd\";\nimport * as XLSX from \"xlsx\";\nimport React, { useState } from \"react\";\nimport { keys, map } from \"lodash\";\n\nconst App = () => {\n  const [readStr, setReadStr] = useState();\n\n  // 读文件\n  const handleReadFile = (file) => {\n    const fileName = file.name;\n\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result;\n      if (binaryStr) {\n        const workbook = XLSX.read(binaryStr, {\n          type: \"binary\",\n          raw: true, // 避免错误的单元格内容格式转换\n          codepage: fileName.endsWith(\".csv\") ? 65001 : undefined, // 如果是csv文件，需要显式指定UTF-8避免乱码问题；xlsx则不需要\n        });\n        // const sheetName = workbook.SheetNames[0];\n\n        const res = [];\n\n        workbook.SheetNames.forEach((s) => {\n          const worksheet = workbook.Sheets[s];\n          const jsonList = XLSX.utils.sheet_to_json(worksheet);\n          const header = jsonList[0];\n          keys(header).forEach((k) => {\n            const matchedList = map(jsonList, (item) => item[k]).filter(\n              Boolean\n            );\n            const formatedStr = matchedList\n              .join(\"、\")\n              .replaceAll(\"，\", \"、\")\n              .replace(/\\s+/g, \"、\");\n\n            res.push(`${s}_${k}：${formatedStr}`);\n          });\n        });\n\n        setReadStr(res.join(\"\\n\\n\"));\n      }\n    };\n\n    reader.onerror = () => {\n      message.error(\"文件读取失败！\");\n    };\n\n    reader.readAsArrayBuffer(file);\n    return false; // 阻止默认上传行为\n  };\n\n  return (\n    <div style={{ padding: 50 }}>\n      <h1 style={{ textAlign: \"center\", marginBottom: 50 }}>\n        声音合成链接 （\n        <span style={{ color: \"royalblue\" }}>男声选 Yunyang (Male)</span>）：\n        <a\n          href=\"https://luvvoice.com/zh\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Luvvoice\n        </a>\n      </h1>\n\n      <Upload.Dragger\n        beforeUpload={handleReadFile}\n        showUploadList={false}\n        style={{ marginBottom: 80 }}\n      >\n        <div style={{ margin: \"200px 0\" }}>\n          <h1>点击/拖拽excel进行读取</h1>\n          <h3 style={{ color: \"red\", margin: 0 }}>先删除无关行、无关列，并保证第一行为表头</h3>\n          <h3 style={{ color: \"red\", margin: 0 }}>表头不要使用合并单元格</h3>\n        </div>\n      </Upload.Dragger>\n\n      <h1 style={{ textAlign: \"center\" }}>Excel读取结果：</h1>\n      <Input.TextArea\n        autoSize\n        value={readStr}\n        onChange={(e) => setReadStr(e.target.value)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}